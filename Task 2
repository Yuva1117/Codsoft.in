import math

# Constants for the players
HUMAN = 'O'
AI = 'X'
EMPTY = ' '

# Initialize the board
def create_board():
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]

# Print the board
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

# Check if the board is full
def is_board_full(board):
    for row in board:
        if EMPTY in row:
            return False
    return True

# Check for a winner
def check_winner(board, player):
    # Check rows
    for row in board:
        if all([cell == player for cell in row]):
            return True

    # Check columns
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    # Check diagonals
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        return True
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:
        return True

    return False

# Evaluate the board
def evaluate(board):
    if check_winner(board, AI):
        return 1
    elif check_winner(board, HUMAN):
        return -1
    else:
        return 0

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    score = evaluate(board)

    if score == 1 or score == -1:
        return score

    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    best_score = max(best_score, minimax(board, depth + 1, False))
                    board[i][j] = EMPTY
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = HUMAN
                    best_score = min(best_score, minimax(board, depth + 1, True))
                    board[i][j] = EMPTY
        return best_score

# Get the best move for the AI
def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Main game loop
def play_game():
    board = create_board()
    print_board(board)
    
    while True:
        # Human move
        row = int(input("Enter the row (0, 1, or 2): "))
        col = int(input("Enter the column (0, 1, or 2): "))
        if board[row][col] == EMPTY:
            board[row][col] = HUMAN
        else:
            print("Cell already occupied! Try again.")
            continue

        print_board(board)

        if check_winner(board, HUMAN):
            print("Congratulations! You win!")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

        # AI move
        ai_move = best_move(board)
        if ai_move:
            board[ai_move[0]][ai_move[1]] = AI
            print("AI has made its move:")
            print_board(board)

            if check_winner(board, AI):
                print("AI wins!")
                break
            elif is_board_full(board):
                print("It's a tie!")
                break

# Run the game
if __name__ == "__main__":
    play_game()
